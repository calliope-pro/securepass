// backend/prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
  interface            = "asyncio"
}

model User {
  id        String   @id // Auth0 UUIDを使用
  email     String   @unique
  fullName  String?  @db.VarChar(100)
  avatarUrl String?  @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // ユーザーが所有するファイル
  files        File[]
  // サブスクリプション
  subscription Subscription?
  
  @@index([email])
  @@index([createdAt])
}

model File {
  id             String   @id @default(uuid())
  shareId        String   @unique @db.VarChar(12)
  filename       String   @db.VarChar(255)
  size           BigInt
  mimeType       String   @db.VarChar(100)
  encryptedKey   String   @db.Text // 暗号化された共有鍵
  r2Key          String   @db.VarChar(255)
  uploadStatus   String   @default("uploading") // uploading, completed, failed
  chunkCount     Int      @default(0)
  uploadedChunks Int      @default(0)
  blocksRequests Boolean  @default(false) // 新規リクエスト受付停止フラグ
  blocksDownloads Boolean @default(false) // ダウンロード禁止フラグ
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  maxDownloads   Int      @default(1)
  
  // ファイルの所有者（オプショナル - 匿名アップロードを許可）
  userId         String?
  
  user           User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  requests       AccessRequest[]
  downloads      DownloadLog[]
  chunks         FileChunk[]
  
  @@index([shareId])
  @@index([createdAt])
  @@index([uploadStatus])
  @@index([userId])
  @@index([blocksRequests])
  @@index([blocksDownloads])
}

model FileChunk {
  id         String    @id @default(uuid())
  fileId     String
  chunkIndex Int
  size       Int
  r2Key      String    @db.VarChar(255)
  uploadedAt DateTime?
  
  file       File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([fileId, chunkIndex])
  @@index([fileId])
}

model AccessRequest {
  id         String    @id @default(uuid())
  requestId  String    @unique @db.VarChar(12)
  fileId     String
  reason     String?   @db.Text
  status     String    @default("pending") // pending, approved, rejected
  approvedAt DateTime?
  rejectedAt DateTime?
  createdAt  DateTime  @default(now())
  ipHash     String    @db.VarChar(64) // SHA256(IP + Salt)
  
  file       File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  downloads  DownloadLog[]
  
  @@index([requestId])
  @@index([fileId, status])
  @@index([createdAt])
}

model DownloadLog {
  id           String        @id @default(uuid())
  fileId       String
  requestId    String
  downloadedAt DateTime      @default(now())
  ipHash       String        @db.VarChar(64)
  
  file         File          @relation(fields: [fileId], references: [id], onDelete: Cascade)
  request      AccessRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  @@index([fileId])
  @@index([requestId])
}

model UploadSession {
  id         String   @id @default(uuid())
  sessionKey String   @unique @db.VarChar(64)
  fileId     String?
  status     String   @default("active") // active, completed, expired
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  metadata   Json?    // チャンク情報など
  
  @@index([sessionKey])
  @@index([status, expiresAt])
}

model Plan {
  id                 String    @id @default(uuid())
  name               String    @unique @db.VarChar(50) // "free", "pro", "enterprise"
  displayName        String    @db.VarChar(100) // "Free", "Pro", "Enterprise"
  price              Int       @default(0) // 価格（セント単位）
  currency           String    @default("usd") @db.VarChar(3)
  stripePriceId      String?   @unique @db.VarChar(255) // Stripe Price ID
  maxFileSize        BigInt    @default(104857600) // 最大ファイルサイズ（バイト）100MB
  maxFilesPerMonth   Int       @default(10) // 月間アップロード数制限
  maxStorageTotal    BigInt    @default(1073741824) // 総ストレージ容量（バイト）1GB
  maxDownloadsPerFile Int      @default(1) // ファイルあたりの最大ダウンロード数
  featuresJson       Json?     // プラン固有の機能（JSON）
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  subscriptions      Subscription[]
  
  @@index([name])
  @@index([isActive])
}

model Subscription {
  id                  String    @id @default(uuid())
  userId              String    @unique
  planId              String
  stripeCustomerId    String?   @db.VarChar(255) // Stripe Customer ID
  stripeSubscriptionId String?  @unique @db.VarChar(255) // Stripe Subscription ID
  status              String    @default("active") // active, canceled, past_due, unpaid
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  cancelAtPeriodEnd   Boolean   @default(false)
  canceledAt          DateTime?
  trialStart          DateTime?
  trialEnd            DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                Plan      @relation(fields: [planId], references: [id])
  
  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([stripeSubscriptionId])
}

model StripeEvent {
  id              String   @id @default(uuid())
  stripeEventId   String   @unique @db.VarChar(255) // Stripe Event ID（冪等性確保）
  eventType       String   @db.VarChar(100) // customer.subscription.created など
  processed       Boolean  @default(false)
  processedAt     DateTime?
  data            Json     // イベントデータ
  createdAt       DateTime @default(now())
  
  @@index([stripeEventId])
  @@index([eventType])
  @@index([processed])
}
